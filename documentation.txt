Food Ordering App - MERN stack



Backend setup

-create folders backend and frontend
-enter folder backend and type command npm init -y
-type command: npm i express cors dotenv mongodb mongoose
-type command: npm i --save-dev ts-node typescript nodemon @types/express @types/cors @types/node
-in package.json file update object scripts
-type command: npx tsc --init
-create folder src and index.ts file
-in index.ts file add basic Node.js Express setup
-create files .env and .env.example
-type command: npm run dev
-update package.json file with "type": "module"
-create nodemon.json file
-update tsconfig.ts file
-open route: http://localhost:3000


Frontend setup

-open link: https://ui.shadcn.com
-open link: https://ui.shadcn.com/docs/installation/vite
-type command: cd frontend 
-in folder frontend type commands from documentation
-remove App.css file
-update component App.tsx
-create folder .vscode and settings.json file
-type command: npm run dev
-open route: http://localhost:5173


Database setup

-open link: https://www.mongodb.com/products/platform/atlas-database
-create new database
-in folder backend, in .env file create variable MONGODB_CONNECTION_STRING
-in index.ts file import object mongoose form package mongoose
-invoke function mongoose.connect()
-open link: https://www.npmjs.com/package/chalk
-type command: npm i chalk
-create folder database and connect.ts file
-in connect.ts file create and export async function connectDB()
-in index.ts file import and invoke function connectDB()
-open route: http://localhost:3000


React Router setup

-open link: https://reactrouter.com
-open link: https://www.npmjs.com/package/react-router-dom
-type command: cd frontend 
-type command: npm i react-router-dom
-in component main.tsx import component BrowserRouter as Router
-in tsx add component Router
-create component AppRoutes.tsx
-in component AppRoutes.tsx import components Routes, Route and Navigate from package react-router-dom
-in component main.tsx import component AppRoutes from component AppRoutes.tsx
-in component Router add component AppRoutes
-open route: http://localhost:5173
-open route: http://localhost:5173/user-profile
-open route: http://localhost:5173/test


Layout and header

-create folder Layouts and component layout.tsx
-in component layout.tsx create HTML elements with Tailwind CSS classes
-create folder shared and component Header.tsx
-in component Header.tsx create HTML elements with Tailwind CSS classes
-import component Link from package react-router-dom
-in component layout.tsx import component Header from component Header.tsx
-open route: http://localhost:5173


Mobile nav

-open link: https://ui.shadcn.com/docs/components/sheet
-type command: npx shadcn@latest add sheet
-open link: https://lucide.dev/guide/packages/lucide-react
-type command: npm i lucide-react
-open link: https://ui.shadcn.com/docs/components/separator
-type command: npx shadcn@latest add separator
-in folder shared create component MobileNav.tsx
-in component MobileNav.tsx import components from component sheet.tsx
-in component Header.tsx import component MobileNav from component MobileNav.tsx
-open route: http://localhost:5173


Desktop nav

-in folder shared create folder MainNav.tsx
-in component Header.tsx import component MainNav from component MainNav.tsx
-open route: http://localhost:5173


Responsive landing page

-in folder shared create component Hero.tsx 
-in folder assets add three images
-in component layout.tsx import component Hero from component Hero.tsx
-create folder pages and component HomePage.tsx
-in component HomePage.tsx create HTML elements with Tailwind CSS classes
-in component AppRoutes.tsx import component HomePage from component HomePage.tsx
-in folder shared create component Footer.tsx
-in component layout.tsx import component Footer from component Footer.tsx
-open route: http://localhost:5173


Auth0 setup

-open link: https://auth0.com
-open option Applications
-create new app
-open link: https://www.npmjs.com/package/@auth0/auth0-react
-type command: npm i @auth0/auth0-react
-create folder auth and component Auth0ProviderWithNavigate.tsx
-in component Auth0ProviderWithNavigate.tsx import component Auth0Provider, types AppState type User from package @auth0/auth0-react
-in tsx add component Auth0Provider with open and close tags
-add to component Auth0Provider props
-create files .env.local and .env.local.example
-in .env.local file add three env variables
-in component main.tsx import component Auth0ProviderWithNavigate from component Auth0ProviderWithNavigate.tsx
-in component MainNav.tsx import and invoke function useAuth0() from package @auth0/auth0-react
-destructure function loginWithRedirect from function useAuth0()
-in tsx add to component Button prop onClick
-type command: npm run dev
-open route: http://localhost:5173 and click Login button
-click Continue with Google button
-open route: http://localhost:5173 and console to see logged in user


Authenticated User Links

-open link: https://ui.shadcn.com/docs/components/dropdown-menu
-type command: npx shadcn@latest add dropdown-menu
-in component MainNav.tsx destructure variable isAuthenticated from function useAuth0()
-in folder shared create component UsernameMenu.tsx
-in component UsernameMenu.tsx import components from component dropdown-menu.tsx
-import and invoke function useAuth0()
-destructure variable user and function logout from function useAuth0()
-in tsx add components for dropdown menu
-in component MainNav.tsx import component UsernameMenu from component UsernameMenu.tsx
-in tsx add ternary condition for variable isAuthenticated ?
-type command: npm run dev
-open route: http://localhost:5173 and console to see logged in user
-click Logout button
-in component MobileNav.tsx import and invoke function useAuth0()
-in tsx add ternary condition for variable isAuthenticated ?
-in folder shared create component MobileNavLinks.tsx 
-in component MobileNavLinks.tsx import and invoke function useAuth0()
-in component MobileNav.tsx import component MobileNavLinks from component MobileNavLinks.tsx 


Creating User Model

-in folder backend, in folder src create folder models and user.ts file
-in user.ts file create and export variable const User 


Creating user API

-in index.ts file invoke function app.use() for route '/api/v1/my/user'
-create folder routes and user.route.ts file
-create folder controllers and user.controller.ts file
-in user.controller.ts file create and export async function createCurrentUser()
-in user.route.ts file import function createCurrentUser
-invoke function router.post() for function createCurrentUser
-open Postman and test endpoint {{BASE_URL}}/api/v1/my/user with POST method
-open MongoDB to see created user


Creating User Request

-open link: https://www.npmjs.com/package/react-query
-type command: npm i react-query --legacy-peer-deps
-in component main.tsx import function QueryClient and component QueryClientProvider
-create variable const queryClient
-in tsx add component QueryClientProvider with prop client
-create folder api and component MyUserApi.tsx
-in component MyUserApi.tsx import and invoke function useMutation from package react-query
-create variable const API_BASE_URL
-create type CreateUserRequest
-create function useCreateMyUser()
-add object return statement
-in component Auth0ProviderWithNavigate.tsx import and invoke function useCreateMyUser()
-update function onRedirectCallback()
-in .env.local file create env variable VITE_API_BASE_URL
-type command: npm run dev
-open route: http://localhost:5173 and login
-open MongoDB to see created user


Auth0 Access Token

-in folder auth create component AuthCallbackPage.tsx
-in component component AuthCallbackPage.tsx import and invoke functions useAuth0(), useCreateMyUser() and useEffect()
-import and invoke functions useNavigate(), useRef() and useEffect()
-in component AppRoutes.tsx import component AuthCallbackPage.tsx
-in component Auth0ProviderWithNavigate.tsx import and invoke function useNavigate()
-in component MyUserApi.tsx import and invoke function useAuth0()
-create variable const accessToken
-in object headers add option Authorization
-open route: http://localhost:5173
-in your browser open console and network tab to see access token


Validate access token

-open Auth0 dashboard and select option Applications
-select option APIs
-click button Create API
-copy code from documentation
-in folder backend create folder middlewares
-open link: https://www.npmjs.com/package/express-oauth2-jwt-bearer
-type command: npm i express-oauth2-jwt-bearer
-in folder middlewares create auth.middleware.ts file
-in auth.middleware.ts file create and export function jwtCheck()
-in .env file create variables AUTH0_AUDIENCE and AUTH0_ISSUER_BASE_URL
-in user.routes.ts file import function jwtCheck from auth.middleware.ts file
-in function post() add function jwtCheck as middleware
-open Postman and test endpoint {{BASE_URL}}/api/v1/my/user with POST method
-in folder frontend, in .env.local file create variable VITE_AUTH0_AUDIENCE
-in component Auth0ProviderWithNavigate.tsx create variable const audience
-update if condition and object authorizationParams
-open route: http://localhost:5173 and login
-in your browser open console and network tab to see access token


Update user profile API

-open link: https://www.npmjs.com/package/tsx
-type command: npm i tsx --save-dev
-update command dev in package.json file
-update tsconfig.json file
-in user.routes.ts file invoke function router.put() for updating user information
-in user.controller.ts file create and export async function updateCurrentUser()
-in user.routes.ts file import function updateCurrentUser
-in auth.middleware.ts file create and export async function jwtParse()
-open link: https://www.npmjs.com/package/jsonwebtoken
-type command: npm i jsonwebtoken
-open link: https://www.npmjs.com/package/@types/jsonwebtoken
-type command: npm i @types/jsonwebtoken --save-dev
-in auth.middleware.ts file create type declare global 
-in user.routes.ts file import function jwtParse
-in folder middlewares create validation.middleware.ts file
-open link: https://www.npmjs.com/package/express-validator
-type command: npm i express-validator
-in validation.middleware.ts file create and export array validateMyUserRequest 
-import functions body and validationResult from package express-validator
-create async function handleValidationErrors()
-in user.routes.ts file import array validateMyUserRequest


User profile form

-open link: https://ui.shadcn.com/docs/components/form
-open link: https://zod.dev
-open link: https://react-hook-form.com
-open link: https://www.npmjs.com/package/@hookform/resolvers
-type command: npx shadcn@latest add form --legacy-peer-deps
-type command: npm i @radix-ui/react-label @radix-ui/react-slot react-hook-form @hookform/resolvers zod --legacy-peer-deps
-in folder ui create component form.tsx
-in component form.tsx add code from documentation
-type command: npx shadcn@latest add input
-open link: https://ui.shadcn.com/docs/components/label
-type command: npm i @radix-ui/react-label
-create component label.tsx
-in component label.tsx add code from documentation
-create folders forms and user-profile-form
-in folder user-profile-form create component UserProfileForm.tsx
-in component UserProfileForm.tsx import add logic for form validation
-create component LoadingButton.tsx
-in component UserProfileForm.tsx import component LoadingButton
-in folder pages create component UserProfilePage.tsx
-in component AppRoutes.tsx import component UserProfilePage
-in tsx update component Route for path 'user-profile'
-open route: http://localhost:5173/user-profile


Update user profile request 

-in component MyUserApi.tsx create and export function useUpdateMyUser()
-create type UpdateMyUserRequest
-in component UserProfilePage.tsx import and invoke function useUpdateMyUser()
-in tsx add to component UserProfileForm props onSave and isLoading
-open route: http://localhost:5173/user-profile and update user


Toast notifications

-open link: https://ui.shadcn.com/docs/components/sonner
-open link: https://www.npmjs.com/package/sonner
-type command: npm install sonner next-themes --legacy-peer-deps
-in folder ui create component sonner.tsx
-in component main.tsx import component Toaster from package sonner
-in component MyUserApi.tsx import function toast from package sonner
-add conditions if for function toast()
-open route: http://localhost:5173/user-profile and update user


Get user API

-in user.controller.ts file create and export async function getCurrentUser()
-in user.route.ts file import function getCurrentUser
-invoke function router.get() for function getCurrentUser
-in component MyUserApi.tsx create and export function useGetMyUser()
-import and invoke function useQuery()
-in component UserProfilePage.tsx import and invoke function useGetMyUser()
-open route: http://localhost:5173/user-profile


Pre-populate user form

-create types.ts file and type User
-in component MyUserApi.tsx import type User
-update component UserProfilePage.tsx with if condition and new prop
-in component UserProfileForm.tsx import type User and update type Prop
-add to function UserProfileForm() new prop 
-import and invoke function useEffect()
-open route: http://localhost:5173/user-profile and update user


Protect user profile route

-open route: http://localhost:5173/user-profile
-in folder auth create component ProtectedRoute.tsx
-in component ProtectedRoute.tsx import function useAuth0, components Navigate i Outlet
-in component AppRoutes.tsx import component ProtectedRoute
-in tsx add component Route for component ProtectedRoute
-open route: http://localhost:5173/user-profile


Backend deployment

-in index.ts file invoke function app.get() for route '/health'
-in tsconfig.json file add option outDir
-in package.json file add commands build and start
-update imports for files in folder backend
-move folder database in folder src
-type command: npm run build
-type command: npm start
-open folder dist
-open route: http://localhost:3000/health


Backend deploy to Render

-open MongoDB Atlas and create new database
-open link: https://www.npmjs.com/package/mongodb
-open link: https://www.mongodb.com/docs/drivers/node/current/#introduction
-in .env file update variable MONGODB_CONNECTION_STRING
-open link: https://www.mongodb.com/docs/atlas/security/ip-access-list/
-type command: npm i mongodb
-update function in connect.ts file
-open link: https://render.com
-create new Service
-add env variables in you project
-click button Deploy Web Service
-open link: https://food-ordering-app-mern-backend.onrender.com
-open link: https://food-ordering-app-mern-backend.onrender.com/health